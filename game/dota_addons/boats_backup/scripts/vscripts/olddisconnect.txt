for ind = 0, 11, 1 do 
				if isDisconnected[ind]~=0 then
					local hero=isDisconnected[ind]
						DisconnectTime[ind]=DisconnectTime[ind]+1
						if DisconnectTime[ind]==180 then
							GameRules:SendCustomMessage("<font color='#800000'> A player is now eligible to be kicked due to disconnect so their team can receive gold. </font> ", DOTA_TEAM_GOODGUYS, 0)
							GameRules:SendCustomMessage("<font color='#800000'> once kicked they will NEVER RECIEVE GOLD EVEN IF THEY RECONNECT </font> ", DOTA_TEAM_GOODGUYS, 0)
							GameRules:SendCustomMessage("<font color='#800000'> To kick this player move their ship onto the 'KICK DISCONNECTED' text  </font> ", DOTA_TEAM_GOODGUYS, 0)
						
						end
						if DisconnectTime[ind]>180 then
							local casterPos = hero:GetAbsOrigin()
							local targetUnitOne = Entities:FindByName( nil, "south_kicker")
							local targetUnitTwo = Entities:FindByName( nil, "north_kicker")
							local directionOne =  casterPos - targetUnitOne:GetAbsOrigin()
							local directionTwo =  casterPos - targetUnitTwo:GetAbsOrigin()
						
						
							if directionOne:Length() < 600 or directionTwo:Length() < 600 then
								DisconnectKicked[ind] =1
							end
						end

						if DisconnectKicked[ind] == 2 then
								if hero:GetTeamNumber() == DOTA_TEAM_GOODGUYS then
									hero:SetGold(0, true)
									BAD_GOLD_TOTAL_MOD = BAD_GOLD_TOTAL_MOD + BAD_GOLD_PER_TICK * 2
								elseif  hero:GetTeamNumber() == DOTA_TEAM_BADGUYS then
									hero:SetGold(0, true)
									GOOD_GOLD_TOTAL_MOD = GOOD_GOLD_TOTAL_MOD + GOOD_GOLD_PER_TICK * 2
							end
						end
						local herogold = hero:GetGold()
					if DisconnectKicked[ind] == 1 and herogold > 30 then
						GameRules:SendCustomMessage("<font color='#800000'> A player is being removed from the game. Their gold and 75 percent of their items and boat value will be distributed with the empire gold </font> ", DOTA_TEAM_GOODGUYS, 0)
						
						if string.match(hero:GetName(),"disruptor") then
							hero:SetGold(herogold + 2250, true)
							hero:SetGold(0, false)
							 print ( '[BAREBONES] player was disruptor and got 2250')
						elseif string.match(hero:GetName(),"ursa") then
							hero:SetGold(herogold + 6000, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was ursa and got 6000')
						elseif string.match(hero:GetName(),"meepo") then
							hero:SetGold(herogold + 4500, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was meepo and got 4500')
						elseif string.match(hero:GetName(),"tidehunter") then
							hero:SetGold(herogold + 750, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was tidehunter and got 750')
						elseif string.match(hero:GetName(),"apparition") then
							hero:SetGold(herogold + 750, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was apparition and got 750')
						elseif string.match(hero:GetName(),"rattletrap") then
							hero:SetGold(herogold + 750, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was rattletrap and got 750')
						elseif string.match(hero:GetName(),"morphling") then
							hero:SetGold(herogold + 2250, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was morphling and got 2250')
						elseif string.match(hero:GetName(),"storm_spirit") then
							hero:SetGold(herogold + 2250, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was storm_spirit and got 2250')
						elseif string.match(hero:GetName(),"undying") then
							hero:SetGold(herogold + 4500, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was zuus and got 6000')
						elseif string.match(hero:GetName(),"slark") then
							hero:SetGold(herogold + 4500, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was slark and got 4500')
						elseif string.match(hero:GetName(),"jakiro") then
							hero:SetGold(herogold + 4500, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was jakiro and got 4500')
						elseif string.match(hero:GetName(),"lion") then
							hero:SetGold(herogold + 2250, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was lion and got 2250')
						elseif string.match(hero:GetName(),"tusk") then
							hero:SetGold(herogold + 6000, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was tusk and got 6000')
						elseif string.match(hero:GetName(),"visage") then
							hero:SetGold(herogold + 6000, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was visage and got 4500')
						elseif string.match(hero:GetName(),"nevermore") then
							hero:SetGold(herogold + 2250, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was nevermore and got 2250')
						elseif string.match(hero:GetName(),"shredder") then
							hero:SetGold(herogold + 4500, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was shredder and got 2250')
						elseif string.match(hero:GetName(),"druid") then
							hero:SetGold(herogold + 6000, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was lone_druid and got 6000')
						elseif string.match(hero:GetName(),"crystal") then
							hero:SetGold(herogold + 750, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was lone_druid and got 6000')
						elseif string.match(hero:GetName(),"phantom") then
							hero:SetGold(herogold + 750, true)
							hero:SetGold(0, false)
							print ( '[BAREBONES] player was phantom_lancer and got 750')
						end
						for itemSlot = 0, 11, 1 do --a For loop is needed to loop through each slot and check if it is the item that it needs to drop
								if hero ~= nil then --checks to make sure the killed unit is not nonexistent.
										local Item = hero:GetItemInSlot( itemSlot ) -- uses a variable which gets the actual item in the slot specified starting at 0, 1st slot, and ending at 5,the 6th slot.
										if Item ~= nil and Item:GetName() == itemName then -- makes sure that the item exists and making sure it is the correct item
											hero:SetGold(herogold + Item:GetGoldCost(0), true)
											hero:SetGold(0, false)
										end
								end
						end
						local herogoldaftersell = hero:GetGold()
						if hero:GetTeamNumber() == DOTA_TEAM_GOODGUYS then
							BAD_GOLD_TOTAL_MOD = BAD_GOLD_TOTAL_MOD + herogoldaftersell
						elseif  hero:GetTeamNumber() == DOTA_TEAM_BADGUYS then
							GOOD_GOLD_TOTAL_MOD = GOOD_GOLD_TOTAL_MOD + herogoldaftersell
						end
						hero:SetGold(0, false)
						hero:SetGold(0, true)
						DisconnectKicked[ind] = 2
						 PlayerResource:ReplaceHeroWith( ind, "npc_dota_hero_zuus" , 0, 1 )
						 for _,hero2 in pairs( Entities:FindAllByClassname( "npc_dota_hero_zuu*")) do
							if hero2 ~= nil then
								local id = hero2:GetPlayerOwnerID()
								
								if id == ind then
								isDisconnected[ind]=hero2
								end
							end
						end
						
							
					end
				end
		end