  print('[ItemFunctions] become_bristleback started!')
    local a = 0
    local plyID = casterUnit:GetPlayerOwnerID()
    local itemlist = {}
    if casterUnit:IsHero() or casterUnit:HasInventory() then 
    	for itemSlot = 0, 11, 1 do 
            if casterUnit ~= nil then
                local Item = casterUnit:GetItemInSlot( itemSlot )
				
				if Item ~= nil and not string.match(Item:GetName(), "boat") then
					print("Item in slot is: " .. Item:GetName())
					itemlist[itemSlot] = Item:GetName()
					
				elseif Item ~= nil and string.match(Item:GetName(), "boat") then
					print("Item in slot is: filler")
					itemlist[itemSlot] = "item_fluff"
				
				else
					print("Item in slot is: filler")
					itemlist[itemSlot] = "item_fluff"
					
				end
				if itemSlot>5 and Item ~= nil then
					casterUnit:EjectItemFromStash(Item)
					GameRules:SendCustomMessage("<font color='#800000'> This is a workaround for items in the stash dissaparing. I have ejected the item and it should be on the ground. sorry. </font> ", DOTA_TEAM_GOODGUYS, 0)
				
				end
				
				
				
            end
		end
    end
	if heroname ~= casterUnit:GetName() then
			local gold = casterUnit:GetGold()
			local xp = casterUnit:GetCurrentXP()
			PlayerResource:ReplaceHeroWith( casterUnit:GetPlayerID(), heroname , 0, 0 )
			for _,hero in pairs( Entities:FindAllByClassname( "npc_dota_hero*")) do
				if hero ~= nil then
					local id = hero:GetPlayerOwnerID()
					RemoveWearables( hero )
					if id == plyID then
						print("this is the new hero, put items in " .. hero:GetName())
						hero:SetGold(gold, true)
						hero:SetGold(0, false)
						hero:AddExperience(xp, false, false)
						for b = 0, 5, 1 do 
							local newItem = CreateItem(itemlist[b], hero, hero)
							if newItem ~= nil then                   -- makes sure that the item exists and making sure it is the correct item
								print("Item Is: " .. newItem:GetName() )
								hero:AddItem(newItem)
							end
						end
						if hero:IsHero() or hero:HasInventory() then 
							for itemSlot = 0, 11, 1 do 
								if hero ~= nil then
									local activateItem = hero:GetItemInSlot( itemSlot )
									if activateItem ~= nil and string.match(activateItem:GetName(), "bow") then
										print("activating " .. activateItem:GetName())
										activateItem:ToggleAbility()
										
									elseif activateItem ~= nil and string.match(activateItem:GetName(), "fluff") then
										print("Item in slot is: filler")
										activateItem:ToggleAbility()
									end
								end
							end
						end
					end
				end
			end
		
		else
			 if casterUnit:IsHero() or casterUnit:HasInventory() then 
			for itemSlot = 0, 11, 1 do 
				if casterUnit ~= nil then
					local Item = casterUnit:GetItemInSlot( itemSlot )
					
					if Item ~= nil and  string.match(Item:GetName(), "boat") then
						casterUnit:RemoveItem(Item)
					end
				end
			end
		end
		
	end
	
	
	
	
	
	function RemoveWearables( hero )
      -- Setup variables
	  Timers:CreateTimer( 0.1, function()
      local model_name = ""

      -- Check if npc is hero
      if not hero:IsHero() then return end

      -- Getting model name
      if model_lookup[ hero:GetName() ] ~= nil and hero:GetModelName() ~= model_lookup[ hero:GetName() ] then
        model_name = model_lookup[ hero:GetName() ]
      else
        return nil
      end

      -- Never got changed before
      local toRemove = {}
      local wearable = hero:FirstMoveChild()
      while wearable ~= nil do
        if wearable:GetClassname() == "dota_item_wearable" then
          table.insert( toRemove, wearable )
        end
        wearable = wearable:NextMovePeer()
      end

      -- Remove wearables
      for k, v in pairs( toRemove ) do
        --v:SetModel( "models/development/invisiblebox.vmdl" )
        v:RemoveSelf()
      end
	
      -- Set model
      hero:SetModel( model_name )
      hero:SetOriginalModel( model_name )
      hero:MoveToPosition( hero:GetAbsOrigin() )
	  end
	  )
end
	